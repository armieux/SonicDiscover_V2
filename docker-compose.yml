services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sonicdiscover-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-sonicdiscover}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - sonicdiscover-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-sonicdiscover}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: sonicdiscover-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Base de données
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-sonicdiscover}
      
      # Application
      NODE_ENV: production
      NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET}
      
      # APIs externes
      GROQ_API_KEY: ${GROQ_API_KEY}
      
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-default-secret-change-in-production}
    volumes:
      # Volume pour les uploads et fichiers statiques persistants
      - app_uploads:/app/public/uploads
      - app_music:/app/public/music
    networks:
      - sonicdiscover-network
    depends_on:
      postgres:
        condition: service_healthy

  # Interface d'administration de la base de données (optionnel)
  adminer:
    image: adminer:4.8.1-standalone
    container_name: sonicdiscover-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - sonicdiscover-network
    depends_on:
      - postgres
    profiles:
      - admin

  # Proxy Nginx pour la production (optionnel)
  nginx:
    image: nginx:alpine
    container_name: sonicdiscover-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
      - app_music:/var/www/music:ro
    networks:
      - sonicdiscover-network
    depends_on:
      - app
    profiles:
      - production

# Volumes persistants
volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_music:
    driver: local

# Réseau dédié
networks:
  sonicdiscover-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

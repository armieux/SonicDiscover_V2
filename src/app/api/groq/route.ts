// app/api/groq/route.ts

import { NextRequest } from "next/server";

/**
 * Fonction utilitaire qui lit le readable stream depuis Groq
 * et l'√©crit directement dans un writable stream.
 * Ici on ne fait aucun parsing SSE, on fait juste un "pass-through".
 */
async function pump(readable: ReadableStream, writable: WritableStream) {
    const reader = readable.getReader();
    const writer = writable.getWriter();
    const decoder = new TextDecoder();
    const encoder = new TextEncoder();

    try {
        while (true) {
            const { value, done } = await reader.read();
            if (done) break;
            if (value) {
                // Convertit le chunk binaire en texte
                const textChunk = decoder.decode(value);
                // On peut √©ventuellement filtrer, parser ou "formatter" ici.
                // Mais pour un simple pass-through, on r√©encode tel quel :
                await writer.write(encoder.encode(textChunk));
            }
        }
    } finally {
        // On ferme toujours le writer
        writer.close();
        reader.releaseLock();
    }
}

export async function POST(req: NextRequest) {

    const initialPrompt = `
        Tu es un assistant de recommandation musicale destin√© √† un public francophone. Ta mission est d'aider l'utilisateur √† d√©couvrir des chansons correspondant √† ses crit√®res (style, artiste, √©poque, humeur, etc.) en te basant sur la liste de musiques suivante :
    
        1. Titre : "Bohemian Rhapsody" ‚Äì Artiste : Queen ‚Äì Genre : Rock  
        2. Titre : "Stairway to Heaven" ‚Äì Artiste : Led Zeppelin ‚Äì Genre : Rock  
        3. Titre : "Shape of You" ‚Äì Artiste : Ed Sheeran ‚Äì Genre : Pop  
        4. Titre : "Like a Rolling Stone" ‚Äì Artiste : Bob Dylan ‚Äì Genre : Folk  
        
        **Instructions :**
        
        1. **Accueil :**  
           Commence par saluer l'utilisateur en fran√ßais et demande-lui quels crit√®res musicaux il souhaite explorer. Par exemple : ¬´ Bonjour ! Quel type de musique cherches-tu aujourd'hui ? Un style particulier, un artiste, une √©poque, une ambiance ? ¬ª
        
        2. **Analyse des crit√®res :**  
           Lorsqu'un utilisateur te communique ses crit√®res, analyse-les et compare-les aux informations de la liste ci-dessus.  
           - Si l'utilisateur mentionne par exemple le style "rock", s√©lectionne et affiche les chansons correspondant au rock (dans ce cas, "Bohemian Rhapsody" et "Stairway to Heaven").  
           - Si l'utilisateur pr√©cise un artiste ou un autre crit√®re suffisamment identifiable, affiche la ou les chansons correspondantes.
        
        3. **R√©ponse :**  
           - Si une ou plusieurs chansons correspondent aux crit√®res, pr√©sente-les de mani√®re claire (par exemple, en indiquant le titre et l'artiste de chaque recommandation).  
           - Si aucun titre ne correspond aux crit√®res donn√©s, r√©ponds poliment : ¬´ Je suis d√©sol√©, mais je n‚Äôai pas de recommandation correspondant √† ces crit√®res pour le moment. ¬ª
        
        4. **Cl√¥ture :**  
           Une fois la recommandation fournie, arr√™te-toi sans relancer la conversation.
        
        √Ä la fin de ta r√©ponse, assure-toi de t'arr√™ter et de ne pas proposer de suivi. Et oublie pas de r√©pondre en fran√ßais ! üá´üá∑
  `;

    try {
        // R√©cup√®re les infos envoy√©es par le front
        const { text } = await req.json();

        // Appelez ici votre cl√© via process.env ou tout autre moyen
        const groqApiKey = process.env.GROQ_API_KEY;
        if (!groqApiKey) {
            return new Response("Cl√© GROQ_API_KEY manquante dans .env", { status: 500 });
        }

        // Exemple d'appel √† Groq
        const groqResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${groqApiKey}`,
            },
            body: JSON.stringify({
                messages: [
                    { role: "system", content: initialPrompt },
                    { role: "user", content: text }
                ],
                model: "llama-3.3-70b-versatile",
                stream: true,
            }),
        });

        // V√©rifie que Groq renvoie bien un body stream
        if (!groqResponse.body) {
            return new Response("Pas de flux renvoy√© par Groq.", { status: 500 });
        }

        // On cr√©e un TransformStream pour ‚Äúpumper‚Äù les data
        const { readable, writable } = new TransformStream();

        // D√©marre le pump asynchrone
        pump(groqResponse.body, writable);

        // On renvoie le readable tel quel au client
        // Notez le "no-cache" et "Transfer-Encoding: chunked"
        return new Response(readable, {
            headers: {
                "Content-Type": "text/plain; charset=utf-8",
                "Cache-Control": "no-cache, no-transform",
                "Transfer-Encoding": "chunked",
            },
        });
    } catch (err: any) {
        console.error("Erreur route /api/groq :", err);
        return new Response(
            "Erreur interne lors de l'appel √† Groq.",
            { status: 500 }
        );
    }
}
